module sdf2imp/project/create-grammar

imports
  sdf2imp/util/-

strategies

  create-grammar =
    create-grammar-main;
    create-grammar-common
  
  create-grammar-main =
    <file-exists> <conc-strings> ("syntax/", <get-main-class-name>, ".sdf")
  <+
    name        := <get-main-class-name>;
    startsymbol := <StartSymbol <+ !"Start">;
    
    <output-text-file(|["syntax"], <conc-strings> (name, ".sdf"))>
    <conc-strings>
(
"module ", name, "

imports Common

exports

  context-free start-symbols
    ", startsymbol, "

  context-free syntax
  
    \"module\" ID Definition*       -> ", startsymbol, " {cons(\"Module\")}
    \"entity\" ID \"{\" Property* \"}\" -> Definition {cons(\"Entity\")}
    ID \":\" Type                   -> Property {cons(\"Property\")}
    ID                            -> Type {cons(\"Type\")}
"
)
  
  create-grammar-common =
    <file-exists> <conc-strings> ("syntax/Common.sdf")
  <+
    <output-text-file(|["syntax"], "Common.sdf")>
(
// TODO: FLOAT
"module Common

exports

  sorts
    ID INT STRING StringChar CommentChar

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\\_]* -> ID
    \"-\"? [0-9]+            -> INT
    \"\\\"\" ~[\\\"\\n]* \"\\\"\"     -> STRING
    
    \"\\\"\" StringChar* \"\\\"\" -> STRING
    ~[\\\"\\n]               -> StringChar
    \"\\\\\\\"\"                -> StringChar
    
    [\\ \\t\\n\\r] -> LAYOUT
    
    [\\*]                             -> CommentChar
    \"/*\" (~[\\*] | CommentChar)* \"*/\" -> LAYOUT
    \"//\" ~[\\n\\r]* ([\\n\\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    CommentChar -/- [\\/]
    INT         -/- [0-9]
    ID          -/- [a-zA-Z0-9\\_]
    EOF         -/- ~[]

  context-free restrictions

    LAYOUT? -/- [\\ \\t\\n\\r]
    LAYOUT? -/- [\\/].[\\/]
    LAYOUT? -/- [\\/].[\\*]
"
)
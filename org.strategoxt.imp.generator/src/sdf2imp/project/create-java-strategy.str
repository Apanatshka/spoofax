module sdf2imp/project/create-java-strategy

imports
  sdf2imp/util/-
  sdf2imp/options

strategies

  create-java-strategy =
    create-java-strategy-1;
    create-java-strategy-2;
    create-java-strategy-3;
    create-java-library-initializer

  create-java-strategy-1 =
    <file-exists> "editor/java/strategies/InteropRegisterer.java"
  <+
    pkgname  := <get-package-name-text>;
    pkgpart* := <string-tokenize('.')> pkgname;
    
    <output-text-file(|["editor","java",pkgpart*,"strategies"],"InteropRegisterer.java")>
    $[ package [pkgname].strategies;

       import org.strategoxt.lang.JavaInteropRegisterer;
       import org.strategoxt.lang.Strategy;

       /**
        * Helper class for {@link java_strategy_0_0}.
        */
       public class InteropRegisterer extends JavaInteropRegisterer {
			public InteropRegisterer() {
				super(new LibraryInitializer());
			}
	   }
    ]
    
  create-java-library-initializer = 
  	<file-exists> "editor/java/strategies/LibraryInitializer.java"
  <+
    pkgname  := <get-package-name-text>;
    pkgpart* := <string-tokenize('.')> pkgname;
    
    <output-text-file(|["editor","java",pkgpart*,"strategies"],"LibraryInitializer.java")>
  	$[	package [pkgname].strategies;

		import java.util.Collections;
		import java.util.List;

		import org.strategoxt.lang.Context;
		import org.strategoxt.lang.RegisteringStrategy;

		public class LibraryInitializer extends org.strategoxt.lang.LibraryInitializer {

			@Override
			protected List<RegisteringStrategy> getLibraryStrategies() {
				return Collections.asList<RegisteringStrategy>(new java_strategy_0_0());
			}

			@Override
			protected void initializeLibrary(Context context) {
			}

		}]

  
  create-java-strategy-2 =
    <file-exists> "editor/java/strategies/java_strategy_0_0.java"
  <+
    pkgname  := <get-package-name-text>;
    pkgpart* := <string-tokenize('.')> pkgname;
    
    <output-text-file(|["editor","java",pkgpart*,"strategies"],"java_strategy_0_0.java")>
    $[ package [pkgname].strategies;

       import org.spoofax.interpreter.terms.IStrategoTerm;
       import org.spoofax.interpreter.terms.ITermFactory;
       import org.strategoxt.lang.Context;
       import org.strategoxt.lang.RegisteringStrategy;
       
       /**
        * Example Java strategy implementation.
        *
        * This strategy can be used by editor services and can be called
        * in Stratego modules by declaring it as an external strategy
        * as follows:
        *
        * <code>
        *  external java-strategy(|)
        * </code>
        *
        * @see InteropRegisterer  This class registers java_strategy_0_0 for use.
        */
       public class java_strategy_0_0 extends RegisteringStrategy {
         
         private java_strategy_0_0 instance = new java_strategy_0_0();
         
         public void registerImplementators(StrategyCollector collector) {
		    collector.registerStrategyImplementator("java_strategy_0_0", instance);
		 }
       
         @Override
         public IStrategoTerm invoke(Context context, IStrategoTerm current) {
           context.getIOAgent().printError("Input for java-strategy: " + current);
           ITermFactory factory = context.getFactory();
           return factory.makeString("Regards from java-strategy");
         }
       
       }
    ]
  
  create-java-strategy-3 =
    <file-exists> "editor/java/strategies/Main.java"
  <+
    pkgname  := <get-package-name-text>;
    pkgpart* := <string-tokenize('.')> pkgname;
    
   <output-text-file(|["editor","java",pkgpart*,"strategies"],"Main.java")>
    $[ package [pkgname].strategies;

       import org.strategoxt.lang.Context;
       
       public class Main {
         
         public static void init(Context context) {
           // Called when the editor is being initialized
         }
       
       }
    ]

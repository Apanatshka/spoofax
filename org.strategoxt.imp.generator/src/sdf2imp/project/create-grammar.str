module sdf2imp/project/create-grammar

imports
  sdf2imp/util/-

strategies

  create-grammar =
    create-grammar-main;
    create-grammar-main-derived;
    create-grammar-common;
    create-grammar-common-derived;
    create-grammar-sig
  
  create-grammar-main =
    <file-exists> <conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf3")
  <+
    name        := <get-sdf-main-module>;
    startsymbol := <StartSymbol>;
    <output-text-file(|["syntax"], <conc-strings> (name, ".sdf3"))>
    <(GenerateMinimal
    	<
!$[module [name]

imports
	
	Common

context-free start-symbols
  
  [startsymbol]

templates
  
  [startsymbol].Dummy = <>

]
    	+
!$[// Grammar for the [name] language
// By default, based on an example "entity language" syntax

module [name]

imports 

	Common

context-free start-symbols

	[startsymbol]

templates

	[startsymbol].Module = <
		module <ID> 
		
		<Definition*; separator="\n\n">
	>

	Definition.Entity = <
		entity <ID> {
			<Property*; separator="\n">
		}
	>
  	
	Property.Property = <<ID> : <Type>>
	
	Type.Type = <<ID>>

]
    )>


  create-grammar-main-derived =
    <file-exists> <conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf")
  <+
    name        := <get-sdf-main-module>;
    startsymbol := <StartSymbol>;
    <output-text-file(|["syntax"], <conc-strings> (name, ".sdf"))>
    <(GenerateMinimal
    	<
!$[module [name]
imports Common

exports
  context-free start-symbols
    [startsymbol]

  context-free syntax
     -> [startsymbol] {cons("Dummy")}

  context-free syntax
    CONTENTCOMPLETE -> [startsymbol] {cons("COMPLETION-[startsymbol]")}

]
    	+
!$[module [name]
imports Common

exports
  context-free start-symbols
    [startsymbol]

  context-free syntax
    "module" ID Definition*       -> [startsymbol]      {cons("Module")}
    "entity" ID "{" Property* "}" -> Definition {cons("Entity")}
    ID ":" Type                   -> Property   {cons("Property")}
    ID                            -> Type       {cons("Type")}

  context-free syntax
    CONTENTCOMPLETE -> [startsymbol]      {cons("COMPLETION-[startsymbol]")}
    CONTENTCOMPLETE -> Definition {cons("COMPLETION-Definition")}
    CONTENTCOMPLETE -> Property   {cons("COMPLETION-Property")}
    CONTENTCOMPLETE -> Type       {cons("COMPLETION-Type")}

]
    )>

  
  create-grammar-common =
    <file-exists> <conc-strings> ("syntax/Common.sdf3")
  <+
    <output-text-file(|["syntax"], "Common.sdf3")>
// TODO: FLOAT

// MAYBE: unicode ID: 
//   [a-zA-Z\192-\252\255][a-zA-Z0-9\_\192-\252\254\255]* -> UID

${module Common

lexical syntax

	[a-zA-Z][a-zA-Z0-9]* -> ID
	"-"? [0-9]+          -> INT
	
	"\"" StringChar* "\"" -> STRING
	~[\"\n]               -> StringChar
	"\\\""                -> StringChar
	BackSlashChar         -> StringChar
	"\\"                  -> BackSlashChar
	
	[\ \t\n\r] -> LAYOUT
	
	[\*]                             -> CommentChar
	"/*" InsideComment* "*/"         -> LAYOUT
	~[\*]                            -> InsideComment
	CommentChar                      -> InsideComment
	"//" ~[\n\r]* NewLineEOF         -> LAYOUT
	[\n\r]                           -> NewLineEOF
	EOF                              -> NewLineEOF
	
	-> EOF

lexical restrictions

	// Ensure greedy matching for lexicals
	
	CommentChar   -/- [\/]
	INT           -/- [0-9]
	ID            -/- [a-zA-Z0-9\_]
	
	// EOF may not be followed by any char
	
	EOF           -/- ~[]
	
	// Backslash chars in strings may not be followed by " 
	
	BackSlashChar -/- [\"]

context-free restrictions

	// Ensure greedy matching for comments
	
	LAYOUT? -/- [\ \t\n\r]
	LAYOUT? -/- [\/].[\/]
	LAYOUT? -/- [\/].[\*]

}

  create-grammar-common-derived =
    <file-exists> <conc-strings> ("syntax/Common.sdf")
  <+
    <output-text-file(|["syntax"], "Common.sdf")>
// TODO: FLOAT

// MAYBE: unicode ID: 
//   [a-zA-Z\192-\252\255][a-zA-Z0-9\_\192-\252\254\255]* -> UID

${module Common
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]*              -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" InsideComment* "*/"           -> LAYOUT        
    ~[\*]                              -> InsideComment
    CommentChar                        -> InsideComment
    "//" ~[\n\r]* NewLineEOF           -> LAYOUT   
    [\n\r]                             -> NewLineEOF
    EOF                                -> NewLineEOF
                                       -> EOF           

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

}
  
  create-grammar-sig =
    <file-exists> $["include/[<get-sdf-main-module>].str"]
  <+
    <output-text-file(|["include"], $[[<get-sdf-main-module>].str])> $[
      module include/[<get-sdf-main-module>]
      
      // (to be generated)
    ]

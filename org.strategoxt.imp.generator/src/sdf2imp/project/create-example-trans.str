module sdf2imp/project/create-trans

imports
  sdf2imp/util/-

strategies
  
  trans-module-name =
     get-sdf-main-module;
     lower-case;
     cify
  
  create-trans =
    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
  <+
    name     := <trans-module-name>;
    sdf-name := <get-sdf-main-module>;
    
    <output-text-file(|["trans"], <conc-strings> (name, ".str"))>
    <conc-strings>
(
"module ", name, "

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/", sdf-name, "

rules // Main editor interface (defined by the .esv files)
  
  /**
   * Analyzes the current program.
   * Returns a Tuple with errors, warnings, and notes;
   * each a list of (term, message) tuples.
   */
  editor-analyze:
    (ast, path, project-path) -> (errors, warnings, notes)
    with
      // Analysis: scope and record dynamic rules
      try(dr-scope-all-end);
      dr-scope-all-start;
      alltd(record-entity)
    with
      errors   := <collect-all(include-origin(constraint-error))> ast;
      warnings := <collect-all(include-origin(constraint-warning))> ast;
      notes    := <collect-all(include-origin(constraint-note))> ast
  
  /**
   * Resolves a reference when the user control-clicks or presses F3 in the editor.
   * For the entities language, only Type(_) nodes are resolved by default.
   */
  editor-resolve:
    (Type(type), position, ast, path, project-path) -> target
    where
      target := <GetEntity> type

  /**
   * Returns \"hover help\" information for a particular node in the editor.
   * For references, this rule is invoked using the resolved term.
   */
  editor-hover:
    (target, position, ast, path, project-path) -> <conc-strings> (\"Hover help: \", <write-to-string> target)
  
  /**
   * Transforms a selection to Java.
   */
  generate-java:
    (selected, position, ast, path, project-path) -> (\"filename\", \"result-string\")
    with
      fatal-err(|\"Not implemented\")
  
  /**
   * Prints the abstract syntax ATerm of a selection.
   */
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result-string)
    with
      filename      := <guarantee-extension(|\"aterm\")> path;
      result-string := <pp-aterm-box; box2text-string(|120)> selected
  
  /**
   * Adds the originating term to the result of a constraint rule,
   * and concatenates strings in the resulting message if necessary.
   */
  include-origin(s):
    t -> (t', message')
    where
      result := <s> t
    with
      if not(!result => (t', message)) then
        message := result;
        t'      := t
      end;
      message' := <try(all(is-string <+ write-to-string); concat-strings)> message

rules // Semantic rules
    
  /**
   * Reports an error if a property type is undefined.
   */
  constraint-error:
    Property(x, Type(type)) -> [\"Type \", type, \" is not defined\"]
    where
      not(!type => \"String\");
      not(!type => \"Int\");
      not(<GetEntity> type)
  
  /**
   * Reports an error if an entity is defined more than once.
   * This constraint is implemented by testing if the \"bag\" of
   * all entities x is not a singleton list.
   * This error is reported on the entity name x.
   */
  constraint-error:
    Entity(x, _) -> (x, \"Duplicate entity name\")
    where
      not(<bagof-GetEntity> x => [_])
  
  /**
   * Reports a warning if an entity name does not start with a capital.
   * This error is reported on the entity name x.
   */
  constraint-warning:
    Entity(x, _) -> (x, \"Entity names must start with a capital\")
    where
      not(<explode-string; Hd; is-upper> x)
  
  /**
   * Adds a note to modules named \"example.\"
   */
  constraint-note:
    Module(\"example\", _) -> \"This is just an example program in the \\\"entities\\\" language (this note is defined in trans/", name, ".str)\"

  /**
   * Records the definition of an entity in a dynamic rule GetEntity.
   */
  record-entity:
    Entity(x, body) -> Entity(x, body)
    with
      rules(
        GetEntity :+ x -> x
      )

signature constructors

  // These definitions are not strictly necessary, but they
  // ensure that the build doesn't break if the example syntax
  // is changed and these constructors no longer exist.
  Module   : ID * List(Entity)   -> Module
  Entity   : ID * List(Property) -> Entity
  Property : ID * Type           -> Property
  Type     : ID                  -> Type
"
)

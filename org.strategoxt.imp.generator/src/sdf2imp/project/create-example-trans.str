module sdf2imp/project/create-example-trans

imports
  sdf2imp/util/-

strategies

  trans-module-name =
     get-sdf-main-module;
     lower-case;
     cify
  
  create-example-trans =
    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
  <+
    name     := <trans-module-name>;
    sdf-name := <get-sdf-main-module>;
    
<output-text-file(|["trans"], $[[name].str])>
${module {name}

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/compilation-library.generated
  analysis-manual
  check
  generate
  refactor

rules // Main editor interface (defined by editor/{sdf-name}-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze-top;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
  
  // Transforms a selection to Java
  generate-java:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"java")> path;
      result   := <to-java> selected
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
      
  // Prints the analyzed abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze-top> (selected, path, project-path)
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      language  := <index-origin-language> ast;
      index-setup(|language, [project-path], $[[project-path]/[path]]);
      target    := <index-lookup> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      ast'              := <analyze-top> (ast, path, project-path);
      x                 := <collect-one(?COMPLETION(_))> ast';
      COMPLETION(name)  := x;
      (
        proposals       := <index-lookup-all-levels(|name)> x
      <+ 
        proposals       := []
      );
      proposals'        := <map(def-to-name)> proposals

  def-to-name:
    Def([namespace, name | _]) -> name
};

if not(<file-exists> "trans/generate.str") then
  <output-text-file(|["trans"], "generate.str")>
${module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated
  lib/compilation-library.generated

rules // Incremental code generation of project using compilation library.
      
  index-compile-ast(|file, subfile, project-path):
    ast -> None()
    with
      java := <to-java> ast;
      full-path := <dirname> file;
      filename := <guarantee-extension(|"java")> <base-filename> file;
      writePath := $[[full-path]/];
      writeFile :=  $[[writePath][filename]];
      try(<mkdir> writePath);
      <fclose> <fputs> (java, <fopen> (writeFile, "w"));
      <debug> $[Compiling to [writeFile]]

rules // Transformation to java strings.

  to-java:
    Module(x, d*) ->
    $[ package [x];
       
       [d'*]
     ]
    with
      d'* := <to-java> d*
  
  to-java:
    Entity(x, p*) ->
    $[ class [x] ${$
           [p'*]
       $}$
     ]
    with
      p'* := <to-java> p*

  to-java:
    Property(x, Type(t)) -> $[
      private [t] [x];
      
      public [t] get_[x] ${$
          return [x];
      $}$
      
      public void set_[x] ([t] [x]) ${$
          this.[x] = [x];    
      $}$
  ]
  
  to-java:
    Type(t) -> t

  to-java:
    t* -> <map(to-java)> t*
}
end;

if not(<file-exists> "trans/check.str") then
  <output-text-file(|["trans"], "check.str")>
${module check

imports
  libstratego-lib
  include/{sdf-name}
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated

rules // Resolving
  
  constraint-error:
    x{"{[Unresolved(t) | _]}"} -> (x, $[Unable to resolve.])
    
rules // Duplicates
    
  is-unique-namespace = ?Type()
  is-unique-namespace = ?Property()
      
  constraint-error:
    definition -> (definition, $[Duplicate definition])
    where
      key{"{[ns|_]}"} := <nam-get-definition-key> definition;
      <is-unique-namespace> ns;
      definitions := <index-lookup-all> key;
      <gt> (<length> definitions, 1)
    
rules // Other
  
  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)
  
  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
}
end;


if not(<file-exists> "trans/refactor.str") then
  <output-text-file(|["trans"], "refactor.str")>
${module refactor

imports
  lib/refactor-common.generated
  include/{sdf-name}
  lib/editor-common.generated  
  {name}

rules
 
  rename-entity:
    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
    with
      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
      fatal-errors := []

  rename-type(|old-name, new-name):
    Entity(old-name, y) -> Entity(new-name, y)

  rename-type(|old-name, new-name):
    Type(old-name) -> Type(new-name)
    
  semantic-constraint-issues:
    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
    where
    	(_, errors, warnings, _) := <editor-analyze> (ast, "", "");
    	(_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")
}
end

module sdf2imp/project/create-example-trans

imports
  sdf2imp/util/-

strategies

  trans-module-name =
     get-sdf-main-module;
     lower-case;
     cify
  
  create-example-trans =
    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
  <+
    name     := <trans-module-name>;
    sdf-name := <get-sdf-main-module>;
    
<output-text-file(|["trans"], $[[name].str])>
${module {name}

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated
  check
  generate
  prettyprint
  refactorings

rules // Main editor interface (defined by editor/{sdf-name}-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      analyze;
      errors   := <collect-all(constraint-error, conc)> ast;
      warnings := <collect-all(constraint-warning, conc)> ast;
      notes    := <collect-all(constraint-note, conc)> ast
  
  // Transforms a selection to Java
  generate-java:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"java")> path;
      result   := <to-java> selected
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      <debug(!"Resolve: ")> node; 
      Type(type) := node; 
      target     := <GetEntity> type

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) ->
    ["String", "Int" | proposals]
    where
      if !node => Type(COMPLETION(prefix)) then
        proposals := <all-keys-GetEntity>
      end
};

if not(<file-exists> "trans/generate.str") then
  <output-text-file(|["trans"], "generate.str")>
${module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated

rules

  to-java:
    Module(x, d*) ->
    $[ package [x];
       
       [d'*]
     ]
    with
      d'* := <to-java> d*
  
  to-java:
    Entity(x, p*) ->
    $[ class [x] ${$
           [p'*]
       $}$
     ]
    with
      p'* := <to-java> p*

  to-java:
    Property(x, Type(t)) -> $[
      private [t] [x];
      
      public [t] get_[x] ${$
          return [x];
      $}$
      
      public void set_[x] ([t] [x]) ${$
          this.[x] = [x];    
      $}$
  ]
  
  to-java:
    Type(t) -> t

  to-java:
    t* -> <map(to-java)> t*
}
end;

if not(<file-exists> "trans/check.str") then
  <output-text-file(|["trans"], "check.str")>
${module check

imports
  libstratego-lib
  include/{sdf-name}
  lib/editor-common.generated

rules

  // Analysis: does a topdown traversal of the tree,
  // and tries to apply the record-entity rule.
  analyze:
    t -> t
    with
      <topdown(try(record-entity))> t

  // Records the definition of an entity in a dynamic rule GetEntity.
  record-entity:
    Entity(x, body) -> Entity(x, body)
    with
      // For a name 'x', GetEntity will return the original 'x' tree node
      rules(
        GetEntity :+ x -> x
      )
rules
    
  // Reports an error if a property type is undefined.
  // This error is reported on the type name 'type'.
  constraint-error:
    Property(x, Type(type)) -> (type, $[Type [type] is not defined])
    where
      not(!type => "String"); // String and Int are built-in types
      not(!type => "Int");
      not(<GetEntity> type) // no entity for this type
  
  // Reports an error if an entity is defined more than once.
  // This constraint is implemented by testing if the "bag" of
  // all entities x is not a singleton list.
  constraint-error:
    Entity(x, _) -> (x, $[Duplicate entity name])
    where
      not(<bagof-GetEntity> x => [_])
  
  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)
  
  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
}
end;


if not(<file-exists> "trans/refactorings.str") then
  <output-text-file(|["trans"], "refactorings.str")>
${module refactorings

imports
  lib/refactor-common.generated
  include/{sdf-name}
  lib/editor-common.generated  

strategies //renaming
 
rename-entity:
  (selected, position, ast, path, project-path) -> (ast, new-ast)
  with  	
    old-name:=<get-selected-name(|position)> ast;
    new-name:=<input-dialog>("rename", "Rename Entity:", ""); 
    new-ast:=<topdown(try(rename-type(|old-name, new-name)))> ast

get-selected-name(|position):
  ast -> name
    where
	  <term-at-position(|position); ?Type(name)> ast <+
	  <parent-at-position(|position); ?Entity(name, _)> ast 

rename-type(|old-name, new-name):
  Entity(old-name, y) -> Entity(new-name, y)

rename-type(|old-name, new-name):
  Type(old-name) -> Type(new-name)
	
  
strategies //extraction

extract-entity:
  (selected, position, ast, path, project-path) -> (ast, new-ast)
  with
    if <is-list> selected then
  	  properties:= selected;
  	  insert-position:=<init; at-last(map(inc))> position
    else //single property selected
  	  properties:=<![selected]>;
  	  insert-position:=<init; init; at-last(map(inc))> position
    end;
    entity-name:=<input-dialog>("extract", "Extract Entity:", "<Entity Name>");
    prop-name:=<lower-case> entity-name;
    new-ast:=<
      alltd(replace-sublist(?properties|[Property(prop-name, entity-name)]));
      insert-elem(|insert-position, Entity(entity-name, properties))
    > ast	

}
end;

if not(<file-exists> "trans/prettyprint.str") then
  <output-text-file(|["trans"], "prettyprint.str")>
${module prettyprint

imports
  include/{sdf-name}

strategies //custom strategy for code formatting
  
prettyprint:
  Module(x, y) ->
  $[module [x]
  	
    [<map(prettyprint); separate-by(|"\n\n"); concat-strings> y]]
    
prettyprint:
  Entity(x, y) ->
  $[entity [x]${$
      [<map(prettyprint); separate-by(|"\n"); concat-strings> y]
    $}$]
    
prettyprint:
  Property(x, y) -> $[[x] : [<prettyprint> y]]
  
prettyprint:
  Type(t) -> $[[t]]
	
prettyprint=
  where(is-string <+ is-num)

}
end


module sdf2imp/project/create-example-trans

imports
  sdf2imp/util/-

strategies

  trans-module-name =
     get-sdf-main-module;
     lower-case;
     cify
  
  create-example-trans =
    <file-exists> <conc-strings> ("trans/", <trans-module-name>, ".str")
  <+
    name     := <trans-module-name>;
    sdf-name := <get-sdf-main-module>;
    
<output-text-file(|["trans"], $[[name].str])>
${module {name}

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/compilation-library.generated
  analysis-manual
  check
  generate
  refactor

rules // Analysis
  
  // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
  // files that should be re-analyzed.
  analyze:
    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
    with
      ast'                    := <id> ast; // Optional AST desugaring
      (ast'', filesToAnalyze) := <analyze-top(|<language>)> (ast', path, project-path);
      index-transaction(
        errors                := <collect-all(constraint-error, conc)> ast'';
        warnings              := <collect-all(constraint-warning, conc)> ast'';
        notes                 := <collect-all(constraint-note, conc)> ast''
      );
      filesToAnalyze'         := <make-set> <map(index-filepair-to-file)> filesToAnalyze

  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', errors, warnings, notes, filesToAnalyze) := <analyze> (ast, path, project-path);
      <try(editor-queue-analysis)> filesToAnalyze
      
  // Main entry point for analyzes, called when multiple files have changed. 
  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
      index-setup(|<language>, [<project-path>], ".");
      disable-commit-and-compile // Disable compilation during analysis.
    with
      editor-queue-analysis
    with
      // Enable and trigger compilation after all files have been analysed.
      <enable-commit-and-compile> <language>;
      <trigger-commit-and-compile> <language>
      
  // Called when current file is saved.
  editor-save:
    (_, _, _, _, _) -> None()
    with
      index-setup(|<language>, [<project-path>], ".");
      <trigger-commit-and-compile> <language>

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-transaction(
        target := <index-lookup> node
      )

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[[uriString]]
    where
      uriString := <index-uri-to-string> <index-uri> <index-find-key> target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      (ast', _) := <analyze-top(|<language>)> (ast, path, project-path);
      item@COMPLETION(name) := <collect-one(?COMPLETION(_))> ast';
      index-transaction(
        (<index-lookup-all-levels(|name)> item <+ ![]) => proposals
      );
      proposals' := <map(index-uri-name)> proposals

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
      
  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze-top(|<language>)> (selected, path, project-path)   
      
  // Prints the definition annotated abstract syntax ATerm of a selection.
  generate-deffed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"aterm")> path;
      result   := <analyze-defs(|Anon(), Anon())> selected
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.allfiles.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
      
  // Cleans all data from the index.
  index-cleanall:
    (selected, position, ast, path, project-path)  -> None()
    with
      index-setup(|<language>, [project-path], $[[project-path]/[path]]);
      index-clear
    
rules // Utility
  
  // Queue parallel analysis for given list of files.
  editor-queue-analysis = 
    not(?[]); queue-strategy(|"editor-parallel-analyze", "Analyzing files")
      
  // Executes parallel analysis using the index library.
  editor-parallel-analyze:
    files -> None()
    with
      index-parallel-analyze-files(analyze)
};

if not(<file-exists> "trans/generate.str") then
  <output-text-file(|["trans"], "generate.str")>
${module generate

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/{sdf-name}
  lib/editor-common.generated
  lib/compilation-library.generated

rules // Incremental code generation of project using compilation library.
      
  index-compile-ast(|file, subfile):
    ast -> None()
    with
      java := <to-java> ast;
      full-path := <dirname> file;
      filename := <guarantee-extension(|"java")> <base-filename> file;
      writePath := $[[full-path]/];
      writeFile :=  $[[writePath][filename]];
      try(<mkdir> writePath);
      <fclose> <fputs> (java, <fopen> (writeFile, "w"));
      <debug> $[Compiling to [writeFile]]

rules // Transformation to java strings.

  to-java:
    [_] -> <concat-strings> <map(to-java)>

  to-java:
    Module(x, d*) ->
    $[ package [x];
       
       [d'*]
     ]
    with
      d'* := <to-java> d*
  
  to-java:
    Entity(x, p*) ->
    $[ class [x] ${$
           [p'*]
       $}$
     ]
    with
      p'* := <to-java> p*

  to-java:
    Property(x, Type(t)) -> $[
      private [t] [x];
      
      public [t] get_[x] ${$
          return [x];
      $}$
      
      public void set_[x] ([t] [x]) ${$
          this.[x] = [x];    
      $}$
  ]
  
  to-java:
    Type(t) -> t

  to-java:
    t* -> <map(to-java)> t*
}
end;

if not(<file-exists> "trans/check.str") then
  <output-text-file(|["trans"], "check.str")>
${module check

imports
  libstratego-lib
  include/{sdf-name}
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated

rules // Resolving
  
  constraint-error:
    x{"{[Unresolved(t) | _]}"} -> (x, $[Unable to resolve.])
    
rules // Duplicates
    
  is-unique-namespace = ?Type()
  is-unique-namespace = ?Property()
      
  constraint-error:
    definition -> (definition, $[Duplicate definition])
    where
      key{"{[ns|_]}"} := <nam-get-definition-key> definition;
      <is-unique-namespace> ns;
      definitions := <index-lookup-all> key;
      <gt> (<length> definitions, 1)
    
rules // Other
  
  constraint-warning:
    Entity(x, _) -> (x, $[Entity names must start with a capital])
    where
      not(<string-starts-with-capital> x)
  
  constraint-note:
    Module(x @ "example", _) -> (x, $[This is just an example program in the "entities" language
                                      (this note is defined in trans/check.str) ])
}
end;

if not(<file-exists> "trans/analysis-manual.str") then
  <output-text-file(|["trans"], "analysis-manual.str")>
${module analysis-manual

imports
  include/{sdf-name}
  lib/analysis-auto.generated
  lib/index-library.generated
  lib/analysis-library.generated

rules // Adjust lookup

  // Add primitive types to type lookup.
  adjust-index-lookup(target |namespace, path, prefix): 
    Type(<target>) ->  [Def([Type(), "Int"]), Def([Type(), "String"]), [Type() | path]]
}
end;

if not(<file-exists> "trans/refactor.str") then
  <output-text-file(|["trans"], "refactor.str")>
${module refactor

imports
  lib/refactor-common.generated
  include/{sdf-name}
  lib/editor-common.generated  
  {name}

rules
 
  rename-entity:
    (newname, selected-name, position, ast, path, project-path) -> ([(ast, new-ast)], fatal-errors, errors, warnings)
    with
      new-ast  := <topdown(try(rename-type(|selected-name, newname)))> ast; 
      (errors, warnings) := <semantic-constraint-issues> (ast, new-ast);
      fatal-errors := []

  rename-type(|old-name, new-name):
    Entity(old-name, y) -> Entity(new-name, y)

  rename-type(|old-name, new-name):
    Type(old-name) -> Type(new-name)
    
  semantic-constraint-issues:
    (ast, new-ast) -> (<diff>(new-errors, errors), <diff>(new-warnings, warnings))
    where
    	(_, errors, warnings, _) := <editor-analyze> (ast, "", "");
    	(_, new-errors, new-warnings, _) := <editor-analyze> (new-ast, "", "")
}
end

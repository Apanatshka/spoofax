module sdf2imp/modelware/tree2model

imports
  
  sdf2imp/modelware/signatures

rules
  
  tree2model: t       -> M(<term2obj>)
  term2obj  : c#(t*)  -> Obj(<def-uris>, QID("ast", c), <map(term2slot)> t*)
  term2slot : None()  -> None()
  term2slot : Some(t) -> Some(<term2val> t)
  term2slot : t*      -> <map(term2val); combine>
  term2slot : t       -> <term2val>
  term2val  : t       -> Data(t) where is-string; not(ref-uri)
  term2val  : t       -> Link(<ref-uri>)
  term2val  : t       -> Contain(<term2obj> t) where is-compound

rules
  
  def-uris = get-arguments; filter(get-annos; fetch-elem(?Def(<id>)))
  ref-uri = get-annos; fetch-elem(?Def(<id>))
  is-compound = where(not(?Some(_))); explode-term + map(explode-term)

  combine = ?[]
  combine:
    t* -> c#([<map(get-arguments; Hd)> t*])
    where
      c#(_) := <Hd> t*

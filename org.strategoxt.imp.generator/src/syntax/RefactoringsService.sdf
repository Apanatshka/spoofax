module RefactoringsService

imports
  SemanticServices
  BuildersService

exports
  
  syntax
  
    "refactorings" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Refactorings")}

    "refactorings" -> <ReservedName-CF>

    "keybindings" <SectionName-LEX> <LAYOUT?-CF> <KeyBinding*-CF> -> <Section-CF> {cons("KeyBindings")}
    
    "keybindings" -> <ReservedName-CF>
  
  context-free syntax
  	
  	"pp-table" ":" StrategoCall     -> SemanticRule {cons("PPTable"), deprecated("use 'pretty-print' instead")}
  	"pretty-print" ":" StrategoCall -> SemanticRule {cons("PrettyPrint")}
 	"parenthesize" ":" StrategoCall -> SemanticRule {cons("Parenthesize")}
 	"override" "reconstruction" ":" StrategoCall -> SemanticRule {cons("OverrideReconstruction")}
 	"resugar" ":" StrategoCall -> SemanticRule {cons("Resugar")}

    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* UIOption* 
    								-> SemanticRule {cons("Refactoring")}
    
    "shortcut" ":" KeyCombination -> UIOption {cons("Shortcut")}
    "shortcut" ":" InteractionId -> UIOption {cons("Shortcut")}
    
    String -> InteractionId {cons("InteractionId")}
          
    "input" InputField+ -> UIOption {cons("UserInput")}
    
    %% identifier input field [= text field + validation] 
    "identifier" ":" String                  -> InputField {ast("IdInputField(<1>, \"\")")}
    "identifier" ":" String "=" String       -> InputField {cons("IdInputField")}
    "identifier" ":" String "=" StrategoCall -> InputField {cons("IdInputField")}
    
    %% text input field 
    "text" ":" String                  -> InputField {ast("TextInputField(<1>, \"\")")}
    "text" ":" String "=" String       -> InputField {cons("TextInputField")}
    "text" ":" String "=" StrategoCall -> InputField {cons("TextInputField")}

    %% boolean input field 
    "boolean" ":" String                  -> InputField {ast("BooleanInputField(<1>, FalseValue()")}
    "boolean" ":" String "=" BooleanValue -> InputField {cons("BooleanInputField"), prefer}
    "boolean" ":" String "=" StrategoCall -> InputField {cons("BooleanInputField"), avoid}

     "true"  -> BooleanValue {cons("TrueValue")}
     "false" ->  BooleanValue {cons("FalseValue")}
     
    %% choice input field 
    %% list input field
  
     %% Avoid ambiguities with semantic nodes
     "pp-table"  -> SemanticNode {reject}
     "pretty-print"  -> SemanticNode {reject}
     "refactoring"  -> SemanticNode {reject}

context-free syntax
	
     %% Predefined Keybindings
    KeyCombination "=" String -> KeyBinding {cons("KeyBinding")} %% key binding (e.g., Shift + Alt + R = "org.eclipse.jdt.ui.edit.text.java.rename.element")
    {Key "+"}+                -> KeyCombination {cons("KeyCombination")}   %% key combination (e.g., 'Shift + Alt + R')

lexical syntax
     
     "Shift"  -> Key
     "Alt"    -> Key
     "Ctrl"   -> Key
     [A-Z]    -> Key

context-free syntax 
	    
    %%recover rules for completion
    "shortcut" ":" Id -> UIOption {ast("Shortcut(KeyCombination(<1>))"), completion}    
    "keybindings"  Id KeyBinding* -> Section {ast("KeyBindings(\"\", [KeyBinding(KeyCombination([<1>]), \"\")])"), completion}
    "refactorings" Id SemanticRule* -> Section {ast("Refactorings(\"\", [Refactoring([],None(), None(), [],[])])"), completion}

    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* "(" Id ")" BuilderOption* UIOption* -> 
    SemanticRule {ast("Refactoring(<1>, <2>, <3>, [BuilderOption(Id)], <7>)"), completion}
    
    "refactoring" SemanticNode* ":" String "=" StrategoCall BuilderOption* UIOption? Id UIOption? -> 
    SemanticRule {ast("Refactoring(<1>, <2>, <3>, <4>, [UserInput(Id)])"), completion}
    
    "input" InputField* Id InputField* -> UIOption {ast("UserInput(InputField(<2>))")}
    
    -> "keybindings" {recover, reject}
    -> "refactorings" {recover, reject}
    -> "provider" {recover, reject}

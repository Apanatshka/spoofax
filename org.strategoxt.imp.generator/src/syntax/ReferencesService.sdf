module ReferencesService

imports
  SemanticServices

exports

  sorts
    CompletionAnno

  syntax
  
    "references" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("References")}

    "references" -> <ReservedName-CF>
    
    %% Deprecated:
  
    "occurrences" <SectionName-LEX> <LAYOUT?-CF> <SemanticRule*-CF> -> <Section-CF> {cons("Occurrences")}

    "occurrences" -> <ReservedName-CF>

  context-free syntax

    "completion" "proposer" ":" StrategoCall -> SemanticRule {cons("CompletionProposer")}

    "completion" "lexical" ":" PropertyValue -> SemanticRule {cons("CompletionLexical")}

    "completion" "keyword" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionKeyword")}

    "completion" "trigger" ":" PropertyValue CompletionAnno -> SemanticRule {cons("CompletionTrigger")}
  
    "reference"  SemanticNode ":" StrategoCall StrategoCall -> SemanticRule {cons("ReferenceHoverRule"), deprecated}

    "reference"  SemanticNode ":" StrategoCall -> SemanticRule {cons("ReferenceRule")}

    "hover"      SemanticNode ":" StrategoCall -> SemanticRule {cons("HoverRule")}
  
    "occurrence" SemanticNode ":" StrategoCall -> SemanticRule {cons("OccurrenceRule")}
  
  context-free syntax
  
    "reference"  -> StrategoCall {reject}
    "hover"      -> StrategoCall {reject}
    "observer"   -> StrategoCall {reject}
    "builder"    -> StrategoCall {reject}
    "occurrence" -> StrategoCall {reject}
    ReservedName -> StrategoCall {reject}

                -> CompletionAnno {cons("None")}
    "(disable)" -> CompletionAnno {cons("Disable")}
    "(disable)" -> PropertyValue {reject}
